public class BinaryTree{
	private TreeNode<?,?> root;
	//The start of the tree or subtree.
	
	private int currentSize;
	//Tracks amount of nodes in the tree with values.
	
	
	public BinaryTree(TreeNode<?, ?> root)
	{
		this.root = root;
		currentSize = 1;
		this.updateSize();
	}
	
	public BinaryTree()
	{
		this.root = null;
		currentSize = 0;
	}
	
	public int size()
	{
		return this.currentSize;
	}
	
	public void updateSize()
	{
		if(this.root.getLeft()!=null)
		{
			currentSize++;
			updateSizeHelper(this.root.getLeft());
		}
		
		if(this.root.getRight()!=null)
		{
			currentSize++;
			updateSizeHelper(this.root.getRight());
		}
	}
	
	public void updateSizeHelper(TreeNode<?, ?> root)
	{
		if(root.getLeft()!=null)
		{
			currentSize++;
			updateSizeHelper(root.getLeft());
		}
		
		if(root.getRight()!=null)
		{
			currentSize++;
			updateSizeHelper(root.getRight());
		}
	}
	
	public void add(Object value)
	{
		if(this.root.getValue().getClass()==value.getClass())
		{
			System.out.println("Object types match!");
			addHelper(value, this.root);
		}
	}
	
	public void addHelper(Object value, TreeNode<?, ?> root)
	{
		if(root.getValue()==null)
		{
			root.setValue(value);
			root.setKey(value);
		}
		else
		{
			if(root.getLeft().getValue()==null)
			{
				root.getLeft().setValue(value);
				root.getLeft().setKey(value);
			}
			else if(root.getLeft().getLeft()!=null)
			{
				addHelper(value, root.getLeft().getLeft());
			}
			else
			{
				if(root.getRight().getValue()==null)
				{
					root.getRight().setValue(value);
					root.getRight().setKey(value);
				}
				else if(root.getRight().getLeft()!=null)
				{
					addHelper(value, root.getRight().getLeft());
				}
				else
				{
					addHelper(value, root.getRight().getRight());
				}
			}
		}
	}
	
	public static void main(String[] args)
	{
		TreeNode<Integer, Integer> testerR = new TreeNode<Integer, Integer>();
		testerR.setKey(1);
		testerR.setValue(1);
		
		TreeNode<Integer, Integer> testerL = new TreeNode<Integer, Integer>();
		testerL.setKey(3);
		testerL.setValue(3);
		
		TreeNode<Integer, Integer> tester = new TreeNode<Integer, Integer>();
		tester.setKey(2);
		tester.setValue(2);
		tester.setRight(testerR);
		tester.setLeft(testerL);
		
		BinaryTree test = new BinaryTree(tester);
		System.out.println(test.size());
		test.add(1);
	}
}
